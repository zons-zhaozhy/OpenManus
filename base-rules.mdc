# 文件编辑工作规范

## 1. 谨慎编辑原则

在编辑或创建文件时，必须遵循以下原则：

1. **先确认文件内容**：在修改前，先完整阅读文件内容，了解其结构和功能。
2. **使用精确修改工具**：优先使用search_replace工具进行精确修改，避免大范围替换导致的错误。
3. **小步迭代修改**：每次只做一个小的改动，并在每次修改后验证结果。
4. **保持一致性**：确保修改后的代码风格与原有代码保持一致。
5. **避免重复轮子**：在添加新功能前，先检查是否已有类似实现，避免重复造轮子。

## 2. 文件编辑最佳实践

1. **读取文件内容**：使用`read_file`工具，先完整了解文件内容。
2. **精确修改**：使用`search_replace`工具进行精确修改，确保只修改需要修改的部分。
3. **验证修改**：每次修改后，使用`run_terminal_cmd`工具验证修改是否正确。
4. **增量修改**：对于复杂修改，拆分为多个小步骤，每步完成后验证。
5. **保留注释**：保留原有代码中的注释，确保代码可读性。

## 3. 错误处理策略

1. **记录错误**：当修改失败时，记录错误信息，分析失败原因。
2. **回滚修改**：如果修改导致系统不稳定，立即回滚到上一个稳定状态。
3. **替代方案**：当一种修改方法失败时，尝试使用替代方法。
4. **分步验证**：对于复杂修改，在每个步骤后验证，避免累积错误。

## 4. 代码质量保证

1. **保持一致性**：遵循项目已有的代码风格和命名约定。
2. **添加注释**：为新增代码添加适当的注释，解释其功能和目的。
3. **避免硬编码**：避免在代码中使用硬编码值，优先使用配置或常量。
4. **错误处理**：确保代码包含适当的错误处理机制。
5. **类型注解**：在Python代码中使用类型注解，提高代码可读性和可维护性。

## 5. 测试验证流程

1. **单元测试**：为新增功能编写单元测试。
2. **集成测试**：确保修改不会破坏现有功能。
3. **系统测试**：使用系统健康检查脚本验证整个系统的健康状态。
4. **性能测试**：确保修改不会导致性能下降。

遵循以上规范，可以确保文件编辑的成功率和准确性，减少引入错误的风险。
