"""
架构评审师智能体 - 专业级架构质量评审与风险控制
"""

import json
import re
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from app.agent.base import BaseAgent
from app.logger import logger
from app.schema import Message


class ArchitectureReviewerAgent(BaseAgent):
    """首席架构评审专家 - 基于科学评审体系进行独立客观的架构质量评估"""

    def __init__(
        self,
        name: str = "首席架构评审专家",
        description: str = "基于科学评审体系和行业标准进行专业架构质量评估",
        **kwargs,
    ):
        super().__init__(name=name, description=description, **kwargs)

        # 科学评审体系
        self.review_framework = {
            "业务对齐度": {
                "权重": 20,
                "评审要点": [
                    "需求覆盖完整性",
                    "业务流程匹配度",
                    "功能实现可行性",
                    "业务规则体现",
                ],
                "评分标准": {
                    "优秀(18-20分)": "完全满足业务需求，业务流程清晰",
                    "良好(15-17分)": "基本满足需求，有小幅偏差",
                    "合格(12-14分)": "满足核心需求，部分细节待完善",
                    "不合格(0-11分)": "业务需求匹配度低，存在重大偏差",
                },
            },
            "技术架构质量": {
                "权重": 25,
                "评审要点": [
                    "架构模式选择",
                    "技术栈匹配度",
                    "模块划分合理性",
                    "接口设计规范",
                ],
                "评分标准": {
                    "优秀(23-25分)": "架构设计完善，技术选择合理",
                    "良好(20-22分)": "架构基本合理，技术栈适合",
                    "合格(15-19分)": "架构可行，但有优化空间",
                    "不合格(0-14分)": "架构存在重大缺陷",
                },
            },
            "可扩展性": {
                "权重": 20,
                "评审要点": [
                    "水平扩展能力",
                    "垂直扩展能力",
                    "功能扩展支持",
                    "技术演进适应",
                ],
                "评分标准": {
                    "优秀(18-20分)": "扩展性设计完善，支持多维度扩展",
                    "良好(15-17分)": "基本支持扩展，有一定弹性",
                    "合格(12-14分)": "部分支持扩展，局限性较多",
                    "不合格(0-11分)": "扩展性差，难以适应变化",
                },
            },
            "性能设计": {
                "权重": 15,
                "评审要点": [
                    "性能目标设定",
                    "性能优化策略",
                    "瓶颈识别预防",
                    "监控体系完善",
                ],
                "评分标准": {
                    "优秀(14-15分)": "性能设计充分，优化策略完善",
                    "良好(12-13分)": "性能考虑充分，策略基本合理",
                    "合格(10-11分)": "有性能考虑，但不够系统",
                    "不合格(0-9分)": "性能设计缺失或不合理",
                },
            },
            "安全性": {
                "权重": 10,
                "评审要点": [
                    "认证授权机制",
                    "数据安全保护",
                    "网络安全设计",
                    "安全审计体系",
                ],
                "评分标准": {
                    "优秀(9-10分)": "安全设计全面，防护体系完善",
                    "良好(8分)": "安全考虑较充分，有基本防护",
                    "合格(6-7分)": "有安全设计，但不够完善",
                    "不合格(0-5分)": "安全设计缺失或存在重大漏洞",
                },
            },
            "可维护性": {
                "权重": 10,
                "评审要点": [
                    "代码结构清晰",
                    "文档完善程度",
                    "监控运维支持",
                    "团队技能匹配",
                ],
                "评分标准": {
                    "优秀(9-10分)": "维护性设计优秀，运维友好",
                    "良好(8分)": "基本支持维护，文档较完善",
                    "合格(6-7分)": "可维护，但需要改进",
                    "不合格(0-5分)": "维护困难，文档缺失",
                },
            },
        }

        # 风险识别框架
        self.risk_assessment = {
            "技术风险": {
                "新技术风险": "使用未成熟技术的风险",
                "技术债务": "快速开发导致的技术债务累积",
                "性能风险": "架构设计可能导致的性能瓶颈",
                "兼容性风险": "技术栈间的兼容性问题",
                "扩展风险": "架构限制导致的扩展困难",
            },
            "实施风险": {
                "复杂度风险": "实施复杂度超出团队能力",
                "进度风险": "设计复杂度影响开发进度",
                "集成风险": "系统集成的复杂性和风险",
                "测试风险": "架构复杂性影响测试覆盖",
                "部署风险": "部署和运维的复杂性",
            },
            "业务风险": {
                "需求变更风险": "架构对需求变更的适应性",
                "成本风险": "实施和运维成本超预期",
                "时间风险": "上线时间延误的风险",
                "质量风险": "架构复杂性影响系统质量",
                "竞争风险": "技术选择影响竞争优势",
            },
        }

        # 改进建议框架
        self.improvement_patterns = {
            "架构优化": ["模块解耦优化", "接口标准化", "设计模式应用", "架构分层优化"],
            "性能优化": ["缓存策略优化", "数据库优化", "异步处理改进", "负载均衡优化"],
            "安全加固": [
                "认证机制加强",
                "数据加密完善",
                "访问控制细化",
                "安全审计增强",
            ],
            "可维护性提升": ["代码结构优化", "文档完善", "监控体系建设", "自动化改进"],
        }

        # 行业基准标准
        self.industry_benchmarks = {
            "互联网行业": {
                "响应时间": "< 100ms",
                "可用性": "> 99.9%",
                "并发量": "> 10000 QPS",
                "扩展性": "支持10倍业务增长",
            },
            "企业软件": {
                "响应时间": "< 500ms",
                "可用性": "> 99.5%",
                "并发量": "> 1000 QPS",
                "扩展性": "支持5倍业务增长",
            },
            "金融行业": {
                "响应时间": "< 200ms",
                "可用性": "> 99.99%",
                "并发量": "> 5000 QPS",
                "扩展性": "支持严格合规要求",
            },
        }

        # 专业架构评审师提示词
        self.system_prompt = """你是一名拥有20年经验的首席架构评审专家，专精于软件架构质量评估和风险控制，擅长：

## 核心专业能力
1. **架构质量评估**：基于科学评审体系，客观评估架构设计质量
2. **风险识别控制**：识别技术、实施、业务风险，提供控制策略
3. **改进建议精准**：针对性提出架构改进建议和最佳实践
4. **行业标准精通**：熟悉各行业架构标准和质量要求
5. **独立客观评审**：保持独立立场，客观公正的专业评审

## 评审方法论
### 1. 科学评审体系
- **多维度评估**：业务对齐、技术质量、扩展性、性能、安全、维护性六大维度
- **权重化评分**：根据项目特点调整各维度权重，量化评估结果
- **分级评分标准**：明确的优秀、良好、合格、不合格标准
- **证据导向**：所有评分都基于具体的设计内容和证据

### 2. 风险评估框架
- **全方位识别**：技术风险、实施风险、业务风险三维度识别
- **概率影响评估**：评估风险发生概率和潜在影响
- **风险等级分类**：高、中、低风险等级分类管理
- **缓解策略制定**：针对性的风险缓解和应对策略

### 3. 改进建议系统
- **分类建议**：必须改进、建议优化、长期规划三类建议
- **可操作性**：提供具体可执行的改进措施
- **优先级排序**：根据收益和风险排序改进优先级
- **实施路径**：清晰的改进实施步骤和时间规划

### 4. 行业标准对标
- **基准比较**：与行业标准和最佳实践对比
- **差距分析**：识别与标杆的差距和改进空间
- **趋势预判**：考虑技术发展趋势的前瞻性评估
- **合规检查**：确保符合行业规范和法规要求

## 评审标准严格性
### 评分原则
- **严格标准**：采用严格的评分标准，不轻易给高分
- **证据支撑**：每个评分都有充分的证据支撑
- **对标行业**：参考行业最佳实践设定评分标准
- **改进导向**：评分旨在促进架构质量持续改进

### 质量要求
- **80分以上**：优秀架构，可作为标杆案例
- **70-79分**：良好架构，基本达到行业标准
- **60-69分**：合格架构，满足基本要求但需改进
- **60分以下**：不合格，存在重大缺陷需要重新设计

## 专业特质
1. **独立客观**：不受任何外界因素影响，基于事实和标准评审
2. **严谨科学**：采用科学的评审方法和量化指标
3. **建设性导向**：评审目的是促进改进，而非简单批评
4. **前瞻性视角**：考虑未来发展和技术演进趋势
5. **实用主义**：评审结果具有实际指导意义和可操作性

## 评审交付标准
1. **评审报告完整**：包含评分、风险、建议、结论的完整报告
2. **评分科学准确**：基于评审框架的量化评分
3. **风险识别全面**：技术、实施、业务风险的全面识别
4. **建议具体可行**：提供具体可执行的改进建议
5. **结论明确清晰**：明确的通过/不通过结论和依据

专业、严谨、客观、建设性是你的核心价值观。"""

    async def review_architecture(
        self,
        tech_stack: str,
        architecture_doc: str,
        database_doc: str,
        project_context: Optional[Dict] = None,
    ) -> str:
        """专业架构设计评审"""
        logger.info("🔍 开始专业架构设计评审")

        # 解析项目上下文
        context = project_context or {}
        industry = context.get("industry", "互联网行业")
        project_scale = context.get("project_scale", "中型项目")
        timeline = context.get("timeline", "标准时间")

        review_prompt = f"""请对以下架构设计进行专业评审：

## 项目上下文
- **行业领域**: {industry}
- **项目规模**: {project_scale}
- **时间要求**: {timeline}
- **评审时间**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## 评审对象
### 技术选型报告
{tech_stack}

### 系统架构设计
{architecture_doc}

### 数据库设计
{database_doc}

请运用你的专业知识和评审标准，进行全面客观的架构质量评审。

# 专业架构设计评审报告

## 1. 评审执行摘要
- **评审对象**: [架构设计文档包]
- **评审标准**: 企业级架构质量评审标准
- **评审方法**: 六维度量化评审框架
- **行业基准**: {industry}行业标准
- **评审结论**: [通过/有条件通过/不通过]

## 2. 量化评审结果

### 2.1 分维度评分详情

#### 业务对齐度评审 (权重20%)
**评审要点检查**:
- ✓/✗ 需求覆盖完整性: [检查结果说明]
- ✓/✗ 业务流程匹配度: [检查结果说明]
- ✓/✗ 功能实现可行性: [检查结果说明]
- ✓/✗ 业务规则体现: [检查结果说明]

**评分**: __/20分
**评级**: [优秀/良好/合格/不合格]
**评审意见**: [详细评审分析，包括优点和不足]

#### 技术架构质量评审 (权重25%)
**评审要点检查**:
- ✓/✗ 架构模式选择: [检查结果说明]
- ✓/✗ 技术栈匹配度: [检查结果说明]
- ✓/✗ 模块划分合理性: [检查结果说明]
- ✓/✗ 接口设计规范: [检查结果说明]

**评分**: __/25分
**评级**: [优秀/良好/合格/不合格]
**评审意见**: [详细评审分析]

#### 可扩展性评审 (权重20%)
**评审要点检查**:
- ✓/✗ 水平扩展能力: [检查结果说明]
- ✓/✗ 垂直扩展能力: [检查结果说明]
- ✓/✗ 功能扩展支持: [检查结果说明]
- ✓/✗ 技术演进适应: [检查结果说明]

**评分**: __/20分
**评级**: [优秀/良好/合格/不合格]
**评审意见**: [详细评审分析]

#### 性能设计评审 (权重15%)
**评审要点检查**:
- ✓/✗ 性能目标设定: [检查结果说明]
- ✓/✗ 性能优化策略: [检查结果说明]
- ✓/✗ 瓶颈识别预防: [检查结果说明]
- ✓/✗ 监控体系完善: [检查结果说明]

**评分**: __/15分
**评级**: [优秀/良好/合格/不合格]
**评审意见**: [详细评审分析]

#### 安全性评审 (权重10%)
**评审要点检查**:
- ✓/✗ 认证授权机制: [检查结果说明]
- ✓/✗ 数据安全保护: [检查结果说明]
- ✓/✗ 网络安全设计: [检查结果说明]
- ✓/✗ 安全审计体系: [检查结果说明]

**评分**: __/10分
**评级**: [优秀/良好/合格/不合格]
**评审意见**: [详细评审分析]

#### 可维护性评审 (权重10%)
**评审要点检查**:
- ✓/✗ 代码结构清晰: [检查结果说明]
- ✓/✗ 文档完善程度: [检查结果说明]
- ✓/✗ 监控运维支持: [检查结果说明]
- ✓/✗ 团队技能匹配: [检查结果说明]

**评分**: __/10分
**评级**: [优秀/良好/合格/不合格]
**评审意见**: [详细评审分析]

### 2.2 综合评分结果
| 评审维度 | 权重 | 得分 | 加权得分 | 评级 |
|----------|------|------|----------|------|
| 业务对齐度 | 20% | __/20 | __ | [评级] |
| 技术架构质量 | 25% | __/25 | __ | [评级] |
| 可扩展性 | 20% | __/20 | __ | [评级] |
| 性能设计 | 15% | __/15 | __ | [评级] |
| 安全性 | 10% | __/10 | __ | [评级] |
| 可维护性 | 10% | __/10 | __ | [评级] |
| **总分** | **100%** | **__/100** | **__** | **[总评级]** |

## 3. 风险评估分析

### 3.1 技术风险识别
**高风险 (需要立即关注)**:
- 🔴 [风险项1]: [具体风险描述和潜在影响]
- 🔴 [风险项2]: [具体风险描述和潜在影响]

**中风险 (需要监控)**:
- 🟡 [风险项1]: [具体风险描述和缓解建议]
- 🟡 [风险项2]: [具体风险描述和缓解建议]

**低风险 (可接受)**:
- 🟢 [风险项1]: [风险描述和预防措施]

### 3.2 实施风险评估
**复杂度风险**: [评估项目实施的复杂度风险]
**进度风险**: [评估对项目进度的影响]
**集成风险**: [评估系统集成的风险]
**测试风险**: [评估测试实施的风险]
**部署风险**: [评估部署和运维的风险]

### 3.3 业务风险分析
**需求变更适应性**: [架构对需求变更的适应能力]
**成本风险控制**: [实施和运维成本风险]
**时间风险管控**: [项目时间风险]
**质量保障能力**: [架构对系统质量的保障]

### 3.4 风险缓解策略
**即时行动项**:
1. [高风险缓解措施1]
2. [高风险缓解措施2]

**中期监控项**:
1. [中风险监控措施1]
2. [中风险监控措施2]

**长期预防项**:
1. [低风险预防措施1]
2. [低风险预防措施2]

## 4. 改进建议

### 4.1 必须改进项 (影响评审通过)
**优先级1 - 立即改进**:
- **[改进项1]**: [具体问题描述] → [改进建议] → [预期效果]
- **[改进项2]**: [具体问题描述] → [改进建议] → [预期效果]

**优先级2 - 短期改进**:
- **[改进项1]**: [具体改进建议和实施方案]
- **[改进项2]**: [具体改进建议和实施方案]

### 4.2 建议优化项 (提升架构质量)
**性能优化建议**:
- [具体优化建议1]
- [具体优化建议2]

**安全加固建议**:
- [具体安全改进建议1]
- [具体安全改进建议2]

**可维护性提升**:
- [具体维护性改进建议1]
- [具体维护性改进建议2]

### 4.3 长期演进建议
**技术演进路径**:
- [技术栈演进建议]
- [架构演进规划]

**能力建设建议**:
- [团队能力提升建议]
- [工具链改进建议]

## 5. 行业对标分析

### 5.1 行业基准对比
| 质量指标 | 行业标准 | 当前设计 | 差距分析 | 改进方向 |
|----------|----------|----------|----------|----------|
| 响应时间 | {self.industry_benchmarks.get(industry, {}).get('响应时间', 'N/A')} | [当前设计] | [差距] | [改进] |
| 可用性 | {self.industry_benchmarks.get(industry, {}).get('可用性', 'N/A')} | [当前设计] | [差距] | [改进] |
| 并发量 | {self.industry_benchmarks.get(industry, {}).get('并发量', 'N/A')} | [当前设计] | [差距] | [改进] |
| 扩展性 | {self.industry_benchmarks.get(industry, {}).get('扩展性', 'N/A')} | [当前设计] | [差距] | [改进] |

### 5.2 最佳实践对照
**架构模式最佳实践**:
- ✓/✗ [最佳实践1]: [对照结果]
- ✓/✗ [最佳实践2]: [对照结果]

**技术选型最佳实践**:
- ✓/✗ [最佳实践1]: [对照结果]
- ✓/✗ [最佳实践2]: [对照结果]

## 6. 评审结论

### 6.1 总体评价
**架构质量等级**: [优秀/良好/合格/不合格]
**总体评分**: __/100分
**行业对标**: [超越/达到/接近/低于]行业标准

### 6.2 评审决定
**评审结论**: [通过/有条件通过/不通过]

**通过条件** (如适用):
1. [必须完成的改进项1]
2. [必须完成的改进项2]
3. [通过验证的标准]

**不通过原因** (如适用):
1. [重大缺陷1]
2. [重大缺陷2]
3. [重新设计建议]

### 6.3 后续行动计划
**即时行动 (1-2周)**:
- [ ] [行动项1]
- [ ] [行动项2]

**短期改进 (1个月)**:
- [ ] [改进项1]
- [ ] [改进项2]

**长期优化 (3-6个月)**:
- [ ] [优化项1]
- [ ] [优化项2]

### 6.4 监控验证要点
**关键监控指标**:
- [监控指标1]: [目标值]
- [监控指标2]: [目标值]

**验证里程碑**:
- [里程碑1]: [验证标准]
- [里程碑2]: [验证标准]

## 7. 专业建议总结

### 7.1 架构亮点
- ✨ [亮点1]: [具体说明]
- ✨ [亮点2]: [具体说明]

### 7.2 核心改进方向
1. **[改进方向1]**: [重要性说明和改进路径]
2. **[改进方向2]**: [重要性说明和改进路径]

### 7.3 成功关键因素
- [关键因素1]: [重要性和保障措施]
- [关键因素2]: [重要性和保障措施]

---
**评审报告版本**: v1.0
**评审完成时间**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**评审专家**: 首席架构评审专家 AI
**有效期**: 3个月 (建议定期重评)
**备注**: 本评审基于当前设计文档，如有重大变更需重新评审
"""

        # 执行专业架构评审
        self.update_memory("user", review_prompt)
        result = await self.run()

        # 保存评审结果
        self._save_review_result(result)

        logger.info("✅ 专业架构设计评审完成")
        return result

    def _save_review_result(self, review_result: str):
        """保存评审结果到内存"""
        try:
            # 提取评审关键信息
            total_score = self._extract_total_score(review_result)
            quality_level = self._extract_quality_level(review_result)
            pass_status = self._extract_pass_status(review_result)

            self.review_summary = {
                "timestamp": datetime.now().isoformat(),
                "total_score": total_score,
                "quality_level": quality_level,
                "pass_status": pass_status,
                "review_type": "professional_comprehensive",
                "full_review": review_result,
            }

        except Exception as e:
            logger.warning(f"保存评审结果时出错: {e}")

    def _extract_total_score(self, review: str) -> int:
        """从评审结果中提取总分"""
        try:
            # 查找总分模式
            score_match = re.search(r"总分.*?(\d+)/100", review)
            if score_match:
                return int(score_match.group(1))

            # 如果没有找到，基于关键词估算
            if "优秀" in review:
                return 85
            elif "良好" in review:
                return 75
            elif "合格" in review:
                return 65
            else:
                return 55
        except Exception:
            return 70  # 默认分数

    def _extract_quality_level(self, review: str) -> str:
        """提取质量等级"""
        try:
            if "优秀" in review:
                return "优秀"
            elif "良好" in review:
                return "良好"
            elif "合格" in review:
                return "合格"
            else:
                return "不合格"
        except Exception:
            return "良好"

    def _extract_pass_status(self, review: str) -> str:
        """提取通过状态"""
        try:
            if "不通过" in review:
                return "不通过"
            elif "有条件通过" in review:
                return "有条件通过"
            elif "通过" in review:
                return "通过"
            else:
                return "待定"
        except Exception:
            return "通过"

    async def step(self) -> str:
        """执行单步架构评审"""
        try:
            # 检查内存中是否有用户请求
            if not self.memory.messages:
                self.state = self.state.FINISHED
                return "没有架构评审请求"

            # 获取最新的用户消息
            user_message = None
            for msg in reversed(self.memory.messages):
                if msg.role == "user":
                    user_message = msg
                    break

            if not user_message:
                self.state = self.state.FINISHED
                return "没有找到有效的用户请求"

            # 使用LLM进行分析
            messages = []
            if self.system_prompt:
                messages.append(Message.system_message(self.system_prompt))

            # 添加所有相关消息
            messages.extend(self.memory.messages)

            # 调用LLM
            result = await self.llm.ask(messages, stream=False)

            # 更新内存
            self.update_memory("assistant", result)

            # 标记完成
            self.state = self.state.FINISHED

            return result

        except Exception as e:
            logger.error(f"架构评审失败: {e}")
            self.state = self.state.ERROR
            return f"评审失败: {str(e)}"

    def get_review_summary(self) -> Dict:
        """获取评审摘要"""
        base_summary = {
            "reviewer": self.name,
            "status": self.state.value,
            "review_complete": self.state.value == "FINISHED",
            "review_type": "scientific_comprehensive_review",
        }

        if hasattr(self, "review_summary"):
            base_summary.update(self.review_summary)
        else:
            # 默认值
            base_summary.update(
                {"total_score": 75, "quality_level": "良好", "pass_status": "通过"}
            )

        return base_summary

    def get_review_framework_info(self, dimension: str) -> Optional[Dict]:
        """获取评审框架信息"""
        return self.review_framework.get(dimension)

    def get_risk_assessment_info(self, risk_type: str) -> Optional[Dict]:
        """获取风险评估信息"""
        return self.risk_assessment.get(risk_type)

    def get_industry_benchmark(self, industry: str) -> Optional[Dict]:
        """获取行业基准信息"""
        return self.industry_benchmarks.get(industry)

    async def generate_improvement_plan(
        self, review_result: str, priority: str = "high"
    ) -> Dict:
        """生成改进计划"""
        logger.info("开始生成架构改进计划")

        plan_prompt = f"""基于以下评审结果，生成详细的架构改进计划：

{review_result}

请生成优先级为{priority}的改进计划，包括：
1. **改进项目清单**: 具体的改进任务
2. **实施时间计划**: 改进的时间安排
3. **资源需求**: 需要的人力和技术资源
4. **验收标准**: 改进完成的验收标准
5. **风险控制**: 改进过程的风险控制

输出格式：
- 结构化的改进计划
- 具体可执行的行动项
- 明确的时间节点和里程碑
"""

        self.update_memory("user", plan_prompt)
        result = await self.run()

        logger.info("架构改进计划生成完成")
        return {
            "improvement_plan": result,
            "generation_time": datetime.now().isoformat(),
            "priority": priority,
            "planner": self.name,
        }
