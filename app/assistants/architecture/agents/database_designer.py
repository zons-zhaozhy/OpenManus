"""
数据库设计师智能体 - 设计数据模型和数据库结构
"""

from typing import Dict, List, Optional

from app.agent.base import BaseAgent
from app.logger import logger


class DatabaseDesignerAgent(BaseAgent):
    """数据库设计师 - 设计数据模型、表结构、索引优化"""

    def __init__(
        self,
        name: str = "数据库设计师",
        description: str = "设计数据模型和数据库结构",
        **kwargs,
    ):
        super().__init__(name=name, description=description, **kwargs)

        # 数据库设计的系统提示词
        self.system_prompt = """你是一名资深的数据库设计专家，负责设计高效、规范、可扩展的数据库结构。

## 工作职责
1. 基于需求和系统架构设计数据模型
2. 设计数据库表结构和字段定义
3. 定义实体关系和约束条件
4. 设计索引策略优化查询性能
5. 考虑数据安全和备份策略

## 设计原则
- **数据库范式**：遵循3NF范式，避免数据冗余
- **性能优化**：合理设计索引，优化查询性能
- **数据完整性**：定义主键、外键、约束条件
- **可扩展性**：支持数据量增长和业务扩展
- **安全性**：敏感数据加密，权限控制

## 设计内容
- **概念模型**：E-R图，实体关系分析
- **逻辑模型**：表结构设计，字段定义
- **物理模型**：索引设计，分区策略
- **数据字典**：详细的字段说明文档

始终遵循数据库设计最佳实践，确保数据一致性和系统性能。"""

    async def design_database_schema(
        self, requirements_doc: str, architecture_doc: str
    ) -> str:
        """设计数据库架构"""
        logger.info("开始数据库架构设计")

        design_prompt = f"""请基于以下需求和系统架构设计数据库：

## 需求规格说明书
{requirements_doc}

## 系统架构设计
{architecture_doc}

请按以下结构输出数据库设计文档：

# 数据库设计文档

## 1. 概念数据模型

### 1.1 核心实体识别
- **[实体1]**：[实体描述及属性]
- **[实体2]**：[实体描述及属性]

### 1.2 实体关系图（E-R图）
```
[用ASCII字符绘制E-R图]
用户 ——— 订单 ——— 商品
  |         |       |
 一对多    多对多   一对多
  |         |       |
角色      订单项    分类
```

## 2. 逻辑数据模型

### 2.1 主要数据表设计

#### 用户表 (users)
| 字段名 | 数据类型 | 长度 | 是否非空 | 默认值 | 说明 |
|--------|----------|------|----------|--------|------|
| id | BIGINT | - | NOT NULL | AUTO_INCREMENT | 主键 |
| username | VARCHAR | 50 | NOT NULL | - | 用户名 |
| email | VARCHAR | 100 | NOT NULL | - | 邮箱 |
| created_at | TIMESTAMP | - | NOT NULL | CURRENT_TIMESTAMP | 创建时间 |

#### [其他核心表]
[按同样格式定义所有核心表]

### 2.2 关系定义
- **外键约束**：[外键关系说明]
- **唯一约束**：[唯一性约束]
- **检查约束**：[数据有效性约束]

## 3. 物理数据模型

### 3.1 索引设计
- **主键索引**：[主键索引策略]
- **唯一索引**：[唯一索引设计]
- **复合索引**：[多字段索引优化]
- **查询优化**：[常用查询索引]

### 3.2 分区策略
- **水平分区**：[大表分区方案]
- **垂直分区**：[字段分离策略]

### 3.3 存储优化
- **数据类型选择**：[优化存储空间]
- **压缩策略**：[数据压缩方案]

## 4. 数据安全设计

### 4.1 敏感数据处理
- **加密字段**：[需要加密的敏感信息]
- **脱敏策略**：[数据脱敏方案]

### 4.2 访问控制
- **用户权限**：[数据库用户权限设计]
- **表级权限**：[细粒度权限控制]

## 5. 备份与恢复

### 5.1 备份策略
- **全量备份**：[定期全量备份]
- **增量备份**：[日常增量备份]

### 5.2 灾难恢复
- **恢复流程**：[数据恢复步骤]
- **故障切换**：[主从切换方案]

## 6. 性能监控

### 6.1 监控指标
- **查询性能**：[慢查询监控]
- **存储使用**：[磁盘空间监控]

### 6.2 优化建议
- **查询优化**：[SQL优化建议]
- **索引优化**：[索引维护策略]

## 7. 数据迁移方案
- **初始化脚本**：[数据库创建脚本]
- **数据导入**：[历史数据迁移]
- **版本升级**：[数据库版本管理]
"""

        # 执行数据库设计
        self.update_memory("user", design_prompt)
        result = await self.run()

        logger.info("数据库架构设计完成")
        return result

    def get_database_summary(self) -> Dict:
        """获取数据库设计摘要"""
        return {
            "designer": self.name,
            "status": self.state.value,
            "design_complete": self.state.value == "FINISHED",
            "database_type": "基于最新设计结果",
        }
