"""
系统架构师智能体 - 设计系统整体架构
"""

from typing import Dict, List, Optional

from app.agent.base import BaseAgent
from app.logger import logger


class SystemArchitectAgent(BaseAgent):
    """系统架构师 - 设计系统架构、模块划分、接口设计"""

    def __init__(
        self,
        name: str = "系统架构师",
        description: str = "设计系统整体架构和模块划分",
        **kwargs,
    ):
        super().__init__(name=name, description=description, **kwargs)

        # 系统架构设计的系统提示词
        self.system_prompt = """你是一名资深的系统架构师，负责设计可扩展、高性能、易维护的软件系统架构。

## 工作职责
1. 基于需求和技术选型设计系统整体架构
2. 进行模块划分和组件设计
3. 定义系统接口和数据流
4. 考虑可扩展性、性能、安全性等非功能性需求
5. 输出详细的架构设计文档

## 架构设计原则
- **单一职责**：每个模块职责清晰
- **松耦合**：模块间依赖最小化
- **高内聚**：模块内部功能相关性强
- **可扩展**：支持功能扩展和性能扩展
- **可测试**：架构支持单元测试和集成测试

## 架构层次
- **表现层**：用户界面、API接口
- **业务层**：业务逻辑、业务规则
- **数据层**：数据访问、数据持久化
- **基础设施层**：缓存、消息队列、监控等

## 输出要求
提供完整的系统架构文档，包含架构图、模块说明、接口定义等。

始终遵循软件工程最佳实践，设计简洁、清晰、可维护的架构。"""

    async def design_system_architecture(
        self, requirements_doc: str, tech_stack: str
    ) -> str:
        """设计系统架构"""
        logger.info("开始系统架构设计")

        # 构建架构设计提示词
        design_prompt = f"""请基于以下需求规格说明书和技术选型进行系统架构设计：

## 需求规格说明书
{requirements_doc}

## 技术选型结果
{tech_stack}

请按以下结构输出系统架构设计文档：

# 系统架构设计文档

## 1. 架构概述
- **系统定位**：[系统目标和定位]
- **架构风格**：[单体/微服务/分层等]
- **核心设计原则**：[遵循的设计原则]

## 2. 系统架构图
```
[用ASCII字符绘制系统整体架构图]
用户 → 前端 → API网关 → 业务服务 → 数据库
       ↓
     第三方服务
```

## 3. 核心模块设计

### 3.1 表现层模块
- **前端应用**：[功能描述]
- **API接口**：[接口设计]
- **数据格式**：[请求/响应格式]

### 3.2 业务层模块
- **[模块1名称]**：[功能职责]
- **[模块2名称]**：[功能职责]
- **模块间通信**：[通信方式]

### 3.3 数据层模块
- **数据访问层**：[数据访问抽象]
- **数据模型**：[核心实体设计]
- **数据存储**：[存储策略]

### 3.4 基础设施模块
- **认证授权**：[安全机制]
- **日志监控**：[监控策略]
- **配置管理**：[配置机制]

## 4. 接口设计

### 4.1 核心API接口
- **用户管理**：[用户相关API]
- **业务功能**：[核心业务API]
- **系统管理**：[管理类API]

### 4.2 数据接口
- **数据库接口**：[数据访问接口]
- **外部服务接口**：[第三方集成]

## 5. 数据流设计
- **请求处理流程**：[详细数据流向]
- **异常处理流程**：[错误处理机制]
- **性能优化点**：[缓存、异步等]

## 6. 部署架构
- **部署环境**：[开发/测试/生产环境]
- **服务部署**：[容器化部署策略]
- **负载均衡**：[负载均衡方案]

## 7. 安全架构
- **认证机制**：[用户认证方案]
- **授权控制**：[权限控制机制]
- **数据安全**：[数据加密传输]

## 8. 可扩展性设计
- **水平扩展**：[服务扩展能力]
- **垂直扩展**：[硬件扩展支持]
- **功能扩展**：[新功能扩展点]

## 9. 风险评估
- **技术风险**：[架构技术风险]
- **性能风险**：[性能瓶颈点]
- **缓解措施**：[风险应对方案]
"""

        # 执行架构设计
        self.update_memory("user", design_prompt)
        result = await self.run()

        logger.info("系统架构设计完成")
        return result

    def get_architecture_summary(self) -> Dict:
        """获取架构设计摘要"""
        return {
            "architect": self.name,
            "status": self.state.value,
            "design_complete": self.state.value == "FINISHED",
            "architecture_style": "基于最新设计结果",
        }
