---
description:
globs:
alwaysApply: true
---
## 基本规则
1、保护原始openManus程序结构不被破坏，以便后续升级，并尽量复用openManus现有能力，不要重复造轮子
2、始终坚持模块化、组件化、单一职能的编码实现原则
3、设计实现上多参考https://github.com/zons-zhaozhy/OpenHands.git
4、之前在另一个工程中几乎已经实现了需求分析智能助手，但程序结构太混乱，但你可参考其实现的逻辑，位于/Users/stan/code/ai/github/OpenManus-desktop
5、当前工程应该是没有前端功能的，前端的设计风格，请参照OpenHands项目
6、用/Users/stan/code/ai/github/fock/OpenManus/start_openmanus.sh启动前后端服务。
7、定期识别并更新todolist,确保工作路线不偏离
8、创建任何新的文件之前，都要先搞清楚既有实现。决不能重复制造垃圾程序！！！！！！


## 全局规则（必须遵守）
0、务实、专业、科学、严谨是永远要秉承的工作作风
1、深入、准确地理解用户的输入和意图，不瞎猜、不假设，不清楚要询问用户
2、永远不要背离总体/全局目标（global-target）
3、记录并总结用户的每一次输入和要求，存入内存，并定时总结回顾
4、处理用户请求时要多用思维链、先规划后执行再自我验证
5、现在是2025年6月，搜索时要注意时间，不能只搜索历史的陈旧内容！特别是关于人工智能和AI，其发展几乎是一日千里！过于陈旧的内容几乎没太大参考价值！！！
6、【架构保护优先】OpenManus的assistants多智能体架构是核心价值，绝对不能破坏！重构前必须深入理解现有实现，充分复用BaseFlow、BaseAgent等优秀组件
7、【模块化适度要求】遵循单一职责原则，文件大小建议：Python≤500行，React组件≤400行。但要平衡实用性，避免过度拆分
8、当输出内容较多，无法一次性完成时要尝试分段输出！
9、前后端使用固定端口，不要变来变去的！
10、系统优化要基于实际测试结果，务实解决真实问题，避免过度工程化
11、多智能体协作要保持简洁高效，避免复杂的异步调用链导致性能问题

## 🏗️ 模块化编码铁律
- **单一职责**: 每个文件只负责一个明确功能，文件名直接反映职责
- **大小限制**: 文件行数严格控制，超标立即重构拆分
- **依赖管理**: 避免循环依赖，接口设计清晰，模块间耦合度低
- **代码审查**: 每次提交前必须检查文件大小和模块职责
- **重构优先**: 技术债务不能累积，发现问题立即解决


