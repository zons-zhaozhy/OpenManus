---
description:
globs:
alwaysApply: false
---
# OpenManus 基础规则

## API 接口规范

### 1. 参数命名规范
- 统一使用下划线命名法（snake_case）
- 参数名必须清晰表达其用途
- 布尔类型参数使用 is_xxx 或 has_xxx 形式
- 时间相关参数使用 xxx_at 形式
- 前后端必须使用相同的参数名，禁止使用不同的命名风格

### 2. 类型定义
- 前端使用 TypeScript 接口定义请求和响应类型
- 后端使用 Pydantic 模型进行参数验证
- 类型定义必须在专门的文件中维护
- 类型定义必须包含完整的注释说明

### 3. 错误处理
- 使用统一的错误响应格式
- 错误信息必须清晰描述问题
- 所有错误必须记录到日志
- 关键错误必须发送告警

### 4. 文档维护
- API 文档必须及时更新
- 文档必须包含完整的示例
- 重要更改必须在文档中标注
- 文档必须经过审核才能发布

## 代码规范

### 1. 文件组织
- 每个文件只负责一个明确的功能
- 文件大小控制在合理范围内
- 相关文件放在同一目录下
- 目录结构要清晰合理

### 2. 命名规范
- 变量名要有明确含义
- 函数名要表达其功能
- 类名要表达其职责
- 常量使用全大写

### 3. 注释规范
- 重要函数必须有文档字符串
- 复杂逻辑必须有注释说明
- 注释要及时更新
- 注释要简洁明了

### 4. 代码质量
- 代码必须通过 linter 检查
- 重要功能必须有单元测试
- 代码要易于维护和扩展
- 避免重复代码

## 工作流程

### 1. 开发流程
- 遵循 Git Flow 工作流
- 每个功能都要创建分支
- 代码必须经过审核
- 定期进行代码重构

### 2. 测试流程
- 编写单元测试
- 进行集成测试
- 执行性能测试
- 进行安全测试

### 3. 部署流程
- 使用自动化部署
- 执行冒烟测试
- 进行回归测试
- 监控系统状态

### 4. 维护流程
- 定期检查系统健康
- 及时修复问题
- 优化系统性能
- 更新系统文档
